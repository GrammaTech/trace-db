Software objects can be instrumented to trace their
execution. Instrumentation inserts source code to print program
locations, variable values, and other information as the program
runs. Traces can be saved to a file or read over a pipe for immediate
use.

Software objects which need to support trace collection should include
an `instrument` method (from SEL) to set it up and derive from
@refapiclass{trace-db/traceable:traceable}.


@section Instrumenting

The instrument method inserts instrumentation code into a software object. For
trace-db, this instrumentation will print program locations as they are
executed. This is implemented using the `instrument` component from SEL.

The `functions' arguments take a list of callbacks which are
executed to generate additional code at each instrumentation point.
This requires some understanding of the trace format. For the common
case of instrumenting variables, the `var-instrument' function takes
care of these details.

For trace-db instrumentation `instrument` method should inject logging
into the software object before each full statement; to avoid intermingling
instrumentation logs with program output, the instrumentation should be printed
to the file given by the @code{__SEL_TRACE_FILE} environment variable. At a
minimum, logging should include an AST counter (:C) and variables in scope at
the given point (:SCOPES). Currently, only primitive types are instrumented.

As an example, consider the following program.

@example
int main(int argc, char** argv) @{
    printf("Hello, World!");
    return 0;
@}
@end example

The trace returned will contain the following elements:

@example
(((:INPUT :BIN) (:TRACE ((:C . 4)  (:SCOPES ("argc" "int" 1 NIL)))
                        ((:C . 10) (:SCOPES ("argc" "int" 1 NIL))))))
@end example



@section Traces

To collect traces, pass an instrumented version of the software object
to the @refapigeneric{trace-db/traceable:collect-traces} method along
with a test suite of test cases you wish to execute on the instrumented
object.

The trace format can store program locations, variables, and auxiliary
data represented as integers. Program locations are identified by a
single integer. For software spanning multiple files (with the
@code{project} class), the file and AST identifiers must be
packed into this integer.

@subsection Limitations

@itemize
@item Instrumentation of long double variables is not supported,
because CFFI (which is used to wrap the trace library) does not
support long doubles.

@item The @code{:print-strings} option to
`var-instrument` does not print the contents of
wide-character strings.
@end itemize
