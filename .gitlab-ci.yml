variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_PROJECT_PATH-$CI_PIPELINE_ID'

stages:
  - build-test-tag

.run-template: &run
  stage: build-test-tag
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker pull $DOCKER_REGISTRY/synthesis/clang:latest
    - docker build -f Dockerfile.${OS} -t ${LOCAL_IMAGE_NAME}-${OS} .

    # If on master branch, push test results to DataManager and push
    # up a new "latest" image, otherwise, run locally.
    - if [ "$CI_BUILD_REF_NAME" = "master" ];
      then
          docker run -e LOCAL_USER=root ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c "cd /gt/trace-db && make check";
          if [ "$OS" = "ubuntu" ];
          then
              docker tag ${LOCAL_IMAGE_NAME}-${OS} $DOCKER_REGISTRY/$CI_PROJECT_PATH:latest;
              docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
              docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH:latest;
          elif [ "$OS" = "arch" ];
          then
              docker tag ${LOCAL_IMAGE_NAME}-${OS} $DOCKER_REGISTRY/$CI_PROJECT_PATH:arch;
              docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
              docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH:arch;
          fi
      else
          docker run -e LOCAL_USER=root ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c "cd /gt/trace-db && make check";
      fi

    # Cleanup
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}

run-ubuntu:
  stage: build-test-and-tag
  variables:
    OS: 'ubuntu'
  <<: *run

run-arch:
  stage: build-test-and-tag
  variables:
    OS: 'arch'
  <<: *run
